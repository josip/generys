#!/usr/bin/env io
Kano setUseExternalFile(false)

Config := Object clone do(
  env := "dev"
)

numberOfInstances := 1

Namespaces Options do(
  s := option(host,
    """Sets host, can be an IP or domain name."""
    Config host := host)

  p := option(port,
    """Sets port number. Defaults to 4000."""
    Config port := port)

  pp := option(prefix,
    """Sets URL prefix path. Empty by default."""
    Config urlPrefixPath := prefix)

  l := option(path,
    """Path to the log file."""
    Config logFile := path)

  n := option(instances,
    """Number of instances to run."""
    numberOfInstances = instances asNumber)

  d := option(path,
    """Runs application in provided directory."""
    Directory setCurrentWorkingDirectory(Path absolute(path)))

  v := method(
    """Prints version of Generys."""
    "Hi, my name is Generys and I'm #{Generys version} years old." interpolate println
    System exit)
)

Namespaces Default do(
  start := task(
    """Starts the application."""

    loader := File with("main.io")
    loader exists ifFalse(
      return(" ! This is not a Generys directory (or main.io is missing)" println))
    
    if(self numberOfInstances == 1,
      doFile("main.io")
      Generys config = Config appendProto(Generys config)
      Generys serve
    ,
      Config hasSlot("port") ifFalse(Config port ::= 4000)
      numberOfInstances repeat(n,
        threadConf := Config clone
        threadConf = threadConf setPort(threadConf port + n) serialized
        cwd := Directory currentWorkingDirectory
        threadCode := """
          Directory setCurrentWorkingDirectory("#{dir}")
          doFile("main.io")
          _config := #{threadConf}
          Generys config = _config appendProto(Generys config)
          Generys serve
        """ interpolate
        Thread createThread(threadCode))

      while(Thread threadCount > 1, System sleep(5))
    ))

  create := task(
    """Creates a new Generys application."""

    root := Directory with(Directory currentWorkingDirectory)
    #root exists ifTrue(
    #  return("Directory #{root path} already exists!" interpolate println))

    root create
    skeletonDir := Eerie usedEnv packageNamed("Generys") path .. "/skeleton"
    System system("cp -R #{skeletonDir}/* #{root path}" interpolate)
    "- Copied Generys files to #{root path}" interpolate println
    System exit)

  test := method(
    """ Runs the tests for a given application. """

    path = Directory currentWorkingDirectory .. "tests/correctness"
    " - Running tests in #{path}" interpolate println

    # run.io relies on System launchPath 
    System launchPath = path
    doFile(path .. "/run.io")
    System exit)
)


Kano run

